// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/mock-git.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	git "github.com/pal-paul/go-libraries/pkg/git"
	gomock "go.uber.org/mock/gomock"
)

// MockIGit is a mock of IGit interface.
type MockIGit struct {
	ctrl     *gomock.Controller
	recorder *MockIGitMockRecorder
	isgomock struct{}
}

// MockIGitMockRecorder is the mock recorder for MockIGit.
type MockIGitMockRecorder struct {
	mock *MockIGit
}

// NewMockIGit creates a new mock instance.
func NewMockIGit(ctrl *gomock.Controller) *MockIGit {
	mock := &MockIGit{ctrl: ctrl}
	mock.recorder = &MockIGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGit) EXPECT() *MockIGitMockRecorder {
	return m.recorder
}

// AddReviewers mocks base method.
func (m *MockIGit) AddReviewers(number int, prReviewers git.Reviewers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReviewers", number, prReviewers)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReviewers indicates an expected call of AddReviewers.
func (mr *MockIGitMockRecorder) AddReviewers(number, prReviewers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReviewers", reflect.TypeOf((*MockIGit)(nil).AddReviewers), number, prReviewers)
}

// CreateBranch mocks base method.
func (m *MockIGit) CreateBranch(branch, sha string) (*git.BranchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", branch, sha)
	ret0, _ := ret[0].(*git.BranchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockIGitMockRecorder) CreateBranch(branch, sha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockIGit)(nil).CreateBranch), branch, sha)
}

// CreatePullRequest mocks base method.
func (m *MockIGit) CreatePullRequest(baseBranch, branch, title, description string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", baseBranch, branch, title, description)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockIGitMockRecorder) CreatePullRequest(baseBranch, branch, title, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockIGit)(nil).CreatePullRequest), baseBranch, branch, title, description)
}

// CreateUpdateAFile mocks base method.
func (m *MockIGit) CreateUpdateAFile(branch, filePath string, content []byte, message, sha string) (*git.FileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdateAFile", branch, filePath, content, message, sha)
	ret0, _ := ret[0].(*git.FileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdateAFile indicates an expected call of CreateUpdateAFile.
func (mr *MockIGitMockRecorder) CreateUpdateAFile(branch, filePath, content, message, sha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdateAFile", reflect.TypeOf((*MockIGit)(nil).CreateUpdateAFile), branch, filePath, content, message, sha)
}

// CreateUpdateMultipleFiles mocks base method.
func (m *MockIGit) CreateUpdateMultipleFiles(batch git.BatchFileUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdateMultipleFiles", batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUpdateMultipleFiles indicates an expected call of CreateUpdateMultipleFiles.
func (mr *MockIGitMockRecorder) CreateUpdateMultipleFiles(batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdateMultipleFiles", reflect.TypeOf((*MockIGit)(nil).CreateUpdateMultipleFiles), batch)
}

// GetAFile mocks base method.
func (m *MockIGit) GetAFile(branch, filePath string) (*git.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAFile", branch, filePath)
	ret0, _ := ret[0].(*git.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAFile indicates an expected call of GetAFile.
func (mr *MockIGitMockRecorder) GetAFile(branch, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAFile", reflect.TypeOf((*MockIGit)(nil).GetAFile), branch, filePath)
}

// GetBranch mocks base method.
func (m *MockIGit) GetBranch(branch string) (*git.BranchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", branch)
	ret0, _ := ret[0].(*git.BranchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockIGitMockRecorder) GetBranch(branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockIGit)(nil).GetBranch), branch)
}
