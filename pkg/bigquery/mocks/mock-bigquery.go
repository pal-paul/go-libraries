// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/mock-bigquery.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bigquery "cloud.google.com/go/bigquery"
	gomock "go.uber.org/mock/gomock"
)

// MockIBigQuery is a mock of IBigQuery interface.
type MockIBigQuery[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIBigQueryMockRecorder[T]
}

// MockIBigQueryMockRecorder is the mock recorder for MockIBigQuery.
type MockIBigQueryMockRecorder[T any] struct {
	mock *MockIBigQuery[T]
}

// NewMockIBigQuery creates a new mock instance.
func NewMockIBigQuery[T any](ctrl *gomock.Controller) *MockIBigQuery[T] {
	mock := &MockIBigQuery[T]{ctrl: ctrl}
	mock.recorder = &MockIBigQueryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBigQuery[T]) EXPECT() *MockIBigQueryMockRecorder[T] {
	return m.recorder
}

// Append mocks base method.
func (m *MockIBigQuery[T]) Append(dataSet, table string, data T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", dataSet, table, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockIBigQueryMockRecorder[T]) Append(dataSet, table, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIBigQuery[T])(nil).Append), dataSet, table, data)
}

// AppendMany mocks base method.
func (m *MockIBigQuery[T]) AppendMany(dataSet, table string, data []T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendMany", dataSet, table, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendMany indicates an expected call of AppendMany.
func (mr *MockIBigQueryMockRecorder[T]) AppendMany(dataSet, table, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendMany", reflect.TypeOf((*MockIBigQuery[T])(nil).AppendMany), dataSet, table, data)
}

// ExecuteQuery mocks base method.
func (m *MockIBigQuery[T]) ExecuteQuery(sql string) ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", sql)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockIBigQueryMockRecorder[T]) ExecuteQuery(sql any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockIBigQuery[T])(nil).ExecuteQuery), sql)
}

// ImportJsonFile mocks base method.
func (m *MockIBigQuery[T]) ImportJsonFile(dataSet, table, gcsFile string, schema bigquery.Schema, writeDisposition bigquery.TableWriteDisposition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportJsonFile", dataSet, table, gcsFile, schema, writeDisposition)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportJsonFile indicates an expected call of ImportJsonFile.
func (mr *MockIBigQueryMockRecorder[T]) ImportJsonFile(dataSet, table, gcsFile, schema, writeDisposition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportJsonFile", reflect.TypeOf((*MockIBigQuery[T])(nil).ImportJsonFile), dataSet, table, gcsFile, schema, writeDisposition)
}

// ImportJsonFiles mocks base method.
func (m *MockIBigQuery[T]) ImportJsonFiles(dataSet, table string, gcsFile []string, schema bigquery.Schema, writeDisposition bigquery.TableWriteDisposition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportJsonFiles", dataSet, table, gcsFile, schema, writeDisposition)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportJsonFiles indicates an expected call of ImportJsonFiles.
func (mr *MockIBigQueryMockRecorder[T]) ImportJsonFiles(dataSet, table, gcsFile, schema, writeDisposition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportJsonFiles", reflect.TypeOf((*MockIBigQuery[T])(nil).ImportJsonFiles), dataSet, table, gcsFile, schema, writeDisposition)
}
